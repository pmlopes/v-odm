package com.jetdrone.odm;

import io.vertx.core.Vertx;
import io.vertx.ext.jdbc.JDBCClient;
import io.vertx.ext.unit.Async;
import io.vertx.ext.unit.TestContext;
import io.vertx.ext.unit.junit.VertxUnitRunner;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import io.vertx.core.json.JsonObject;

import com.jetdrone.odm.JdbcPersons.Person;
import org.junit.runner.RunWith;

import java.util.List;

@RunWith(VertxUnitRunner.class)
public class JdbcTest {

  private Vertx vertx;
  private JdbcPersons mapper;

  @Before
  public void before(TestContext test) {
    final Async async = test.async();

    vertx = Vertx.vertx();

    final JDBCClient jdbc = JDBCClient.createShared(vertx, new JsonObject()
        .put("url", "jdbc:h2:mem:test?shutdown=true")
        .put("driver_class", "org.h2.Driver"));

    // setup some test data
    jdbc.getConnection(res -> {
      if (res.failed()) {
        test.fail(res.cause());
        async.complete();
      } else {
        res.result().execute(
            "CREATE TABLE IF NOT EXISTS users " +
                " ( ID INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1 INCREMENT BY 1) NOT NULL, " +
                "NAME varchar(255), " +
                "AGE integer, " +
                "CONSTRAINT personid PRIMARY KEY ( ID ) )", res2 -> {
              if (res2.failed()) {
                test.fail(res.cause());
                async.complete();
              } else {
                mapper = new JdbcPersons(jdbc);
                async.complete();
              }
            });
      }
    });
  }

  @After
  public void after(TestContext test) {
    vertx.close(test.asyncAssertSuccess());
  }

  @Test
  public void createSingleInstance(TestContext test) {
    // using the java inner class way
    Person person = mapper.new Person();
    test.assertNotNull(person);
    test.async().complete();
  }

  @Test
  public void saveNewInstance(TestContext test) {
    final Async async = test.async();

    // using the java inner class way
    final Person person = mapper.new Person();
    test.assertNotNull(person);

    // set some fields
    person.put("NAME", "Paulo");
    person.put("AGE", 33);
    // there is no id
    test.assertNull(person.getValue(mapper.ID));
    // save
    person.save(saved -> {
      if (!saved) {
        test.fail();
      } else {
        // user has been saved, the ID should be filled now
        test.assertNotNull(person.getValue(mapper.ID));
      }
      async.complete();
    });
  }

  @Test
  public void loadFromBackend(TestContext test) {
    final Async async = test.async();

    // using the java inner class way
    final Person person = mapper.new Person();
    // set some fields
    person.put("NAME", "Paulo");
    person.put("AGE", 33);

    person.save(saved -> {
      if (!saved) {
        test.fail();
        async.complete();
        return;
      }
      // user has been saved, the ID should be filled now
      test.assertNotNull(person.getValue(mapper.ID));
      long id = person.getId().longValue();

      // load from the DB
      mapper.findOne("WHERE id = " + id, found -> {
        if (found.failed()) {
          test.fail(found.cause());
          async.complete();
          return;
        }

        Person person1 = found.result();

        test.assertEquals("Paulo", person1.getString("NAME"));
        test.assertEquals(33, person1.getInteger("AGE"));
        async.complete();
      });
    });
  }

  @Test
  public void saveAndUpdate(TestContext test) {
    final Async async = test.async();

    // using the java inner class way
    final Person person = mapper.new Person();
    // set some fields
    person.put("NAME", "Paulo");
    person.put("AGE", 33);

    person.save(saved -> {
      if (!saved) {
        test.fail();
        async.complete();
        return;
      }
      // user has been saved, the ID should be filled now
      test.assertNotNull(person.getValue(mapper.ID));

      person.put("NAME", "Paulo Lopes");

      person.update(updated -> {
        if (!updated) {
          test.fail();
          async.complete();
          return;
        }

        // load from the DB
        mapper.findOne("WHERE id = " + person.getId(), foundOne -> {
          if (foundOne.failed()) {
            test.fail(foundOne.cause());
            async.complete();
            return;
          }

          Person person1 = foundOne.result();

          test.assertEquals("Paulo Lopes", person1.getString("NAME"));
          test.assertEquals(33, person1.getInteger("AGE"));
          async.complete();
        });
      });
    });
  }

  @Test
  public void saveAndRemove(TestContext test) {
    final Async async = test.async();

    // using the java inner class way
    final Person person = mapper.new Person();
    // set some fields
    person.put("NAME", "Paulo");
    person.put("AGE", 33);

    person.save(saved -> {
      if (!saved) {
        test.fail();
        async.complete();
        return;
      }
      // user has been saved, the ID should be filled now
      test.assertNotNull(person.getValue(mapper.ID));

      person.remove(updated -> {
        if (!updated) {
          test.fail();
          async.complete();
          return;
        }

        // load from the DB
        mapper.findOne("WHERE id = " + person.getId(), foundOne -> {
          if (foundOne.failed()) {
            test.fail(foundOne.cause());
            async.complete();
            return;
          }

          Person person1 = foundOne.result();

          test.assertNull(person1);
          async.complete();
        });
      });
    });
  }

  @Test
  public void dropCollection(TestContext test) {
    final Async async = test.async();

    mapper.truncate(drop -> {
      if (drop.failed()) {
        test.fail(drop.cause());
        async.complete();
        return;
      }

      async.complete();
    });
  }

  @Test
  public void findAll(TestContext test) {
    final Async async = test.async();

    mapper.truncate(drop -> {
      if (drop.failed()) {
        test.fail(drop.cause());
        async.complete();
        return;
      }

      final Person person = mapper.new Person();
      person.put("NAME", "name");
      person.put("AGE", 1);

      person.save(saved -> {
        if (!saved) {
          test.fail();
          async.complete();
          return;
        }

        // find all
        mapper.findAll(findAll -> {
          if (findAll.failed()) {
            test.fail(findAll.cause());
            async.complete();
            return;
          }

          List<Person> persons = findAll.result();

          test.assertNotNull(persons);
          test.assertTrue(persons.size() == 1);

          test.assertEquals(person, persons.get(0));
          async.complete();
        });
      });
    });
  }

  @Test
  public void find(TestContext test) {
    final Async async = test.async();

    mapper.truncate(drop -> {
      if (drop.failed()) {
        test.fail(drop.cause());
        async.complete();
        return;
      }

      final Person person1 = mapper.new Person();
      person1.put("NAME", "p1");
      person1.put("AGE", 1);

      person1.save(saved -> {
        if (!saved) {
          test.fail();
          async.complete();
          return;
        }

        final Person person2 = mapper.new Person();
        person2.put("NAME", "p2");
        person2.put("AGE", 2);

        person2.save(saved1 -> {
          if (!saved1) {
            test.fail();
            async.complete();
            return;
          }

          // find using the person1 id
          mapper.find("WHERE id = " + person1.getId(), find -> {
            if (find.failed()) {
              test.fail(find.cause());
              async.complete();
              return;
            }

            List<Person> persons = find.result();

            test.assertNotNull(persons);
            test.assertTrue(persons.size() == 1);

            test.assertEquals(person1, persons.get(0));
            async.complete();
          });
        });
      });
    });
  }

  @Test
  public void findOne(TestContext test) {
    final Async async = test.async();

    mapper.truncate(drop -> {
      if (drop.failed()) {
        test.fail(drop.cause());
        async.complete();
        return;
      }

      final Person person1 = mapper.new Person();
      person1.put("NAME", "p1");
      person1.put("AGE", 1);

      person1.save(saved -> {
        if (!saved) {
          test.fail();
          async.complete();
          return;
        }

        final Person person2 = mapper.new Person();
        person2.put("NAME", "p2");
        person2.put("AGE", 2);

        person2.save(saved1 -> {
          if (!saved1) {
            test.fail();
            async.complete();
            return;
          }

          // find using the person1 id
          mapper.findOne("WHERE id = " + person1.getId(), findOne -> {
            if (findOne.failed()) {
              test.fail(findOne.cause());
              async.complete();
              return;
            }

            Person p = findOne.result();

            test.assertNotNull(p);

            test.assertEquals(person1, p);
            async.complete();
          });
        });
      });
    });
  }

  @Test
  public void count(TestContext test) {
    final Async async = test.async();

    mapper.truncate(drop -> {
      if (drop.failed()) {
        test.fail(drop.cause());
        async.complete();
        return;
      }

      final Person person1 = mapper.new Person();
      person1.put("NAME", "p1");
      person1.put("AGE", 1);

      person1.save(saved -> {
        if (!saved) {
          test.fail();
          async.complete();
          return;
        }

        final Person person2 = mapper.new Person();
        person2.put("NAME", "p2");
        person2.put("AGE", 2);

        person2.save(saved1 -> {
          if (!saved1) {
            test.fail();
            async.complete();
            return;
          }

          // find using the person1 id
          mapper.count(count -> {
            if (count.failed()) {
              test.fail(count.cause());
              async.complete();
              return;
            }

            Number c = count.result();

            test.assertNotNull(c);

            test.assertEquals(2, c.intValue());
            async.complete();
          });
        });
      });
    });
  }
}
